<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>__mmap (1,999,417 samples, 1.08%)</title><rect x="84.8" y="389" width="12.7" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="87.78" y="399.5" ></text>
</g>
<g >
<title>perf_event_exec (69,705 samples, 0.04%)</title><rect x="10.0" y="405" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (98,769 samples, 0.05%)</title><rect x="998.6" y="565" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1001.63" y="575.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;BenchmarkConcurrentMalloc (139,430,600 samples, 75.11%)</title><rect x="12.1" y="581" width="886.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="15.10" y="591.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;BenchmarkConcurrentMalloc</text>
</g>
<g >
<title>try_to_wake_up (6,823,170 samples, 3.68%)</title><rect x="818.8" y="277" width="43.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="821.76" y="287.5" >try_..</text>
</g>
<g >
<title>rcu_sched_clock_irq (972,216 samples, 0.52%)</title><rect x="1120.7" y="101" width="6.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1123.67" y="111.5" ></text>
</g>
<g >
<title>std::map&lt;unsigned long long, Span*, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::end (953,069 samples, 0.51%)</title><rect x="892.3" y="469" width="6.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="895.29" y="479.5" ></text>
</g>
<g >
<title>exc_page_fault (2,626,868 samples, 1.41%)</title><rect x="1156.5" y="565" width="16.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1159.47" y="575.5" ></text>
</g>
<g >
<title>x64_sys_call (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="549" width="9.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1019.59" y="559.5" ></text>
</g>
<g >
<title>select_task_rq_fair (3,209,956 samples, 1.73%)</title><rect x="823.8" y="261" width="20.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="826.81" y="271.5" ></text>
</g>
<g >
<title>do_user_addr_fault (2,626,868 samples, 1.41%)</title><rect x="1156.5" y="549" width="16.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1159.47" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_execve (69,705 samples, 0.04%)</title><rect x="10.0" y="533" width="0.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_erase (954,344 samples, 0.51%)</title><rect x="1055.7" y="485" width="6.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1058.71" y="495.5" ></text>
</g>
<g >
<title>mmput (8,740,193 samples, 4.71%)</title><rect x="1083.6" y="485" width="55.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1086.61" y="495.5" >mmput</text>
</g>
<g >
<title>clone3 (895,328 samples, 0.48%)</title><rect x="1077.9" y="597" width="5.7" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1080.92" y="607.5" ></text>
</g>
<g >
<title>schedule (11,839,181 samples, 6.38%)</title><rect x="649.2" y="261" width="75.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="652.21" y="271.5" >schedule</text>
</g>
<g >
<title>pick_next_task_fair (707,154 samples, 0.38%)</title><rect x="683.5" y="213" width="4.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="686.50" y="223.5" ></text>
</g>
<g >
<title>__lruvec_stat_mod_folio (920,431 samples, 0.50%)</title><rect x="1102.4" y="341" width="5.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1105.36" y="351.5" ></text>
</g>
<g >
<title>futex_wake (8,575,466 samples, 4.62%)</title><rect x="807.6" y="309" width="54.5" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="810.62" y="319.5" >futex..</text>
</g>
<g >
<title>asm_exc_page_fault (578,487 samples, 0.31%)</title><rect x="1077.9" y="581" width="3.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1080.92" y="591.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, BenchmarkMalloc (6,662,350 samples, 3.59%)</title><rect x="898.3" y="517" width="42.4" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="901.35" y="527.5" >voi..</text>
</g>
<g >
<title>mas_walk (2,727,163 samples, 1.47%)</title><rect x="999.3" y="437" width="17.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1002.26" y="447.5" ></text>
</g>
<g >
<title>x64_sys_call (8,740,193 samples, 4.71%)</title><rect x="1083.6" y="565" width="55.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1086.61" y="575.5" >x64_s..</text>
</g>
<g >
<title>ConcurrentAlloc (75,398,973 samples, 40.61%)</title><rect x="12.1" y="485" width="479.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="15.10" y="495.5" >ConcurrentAlloc</text>
</g>
<g >
<title>zap_pte_range (5,790,741 samples, 3.12%)</title><rect x="1102.4" y="373" width="36.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1105.36" y="383.5" >zap..</text>
</g>
<g >
<title>std::vector&lt;void*, std::allocator&lt;void*&gt; &gt;::push_back (5,990,850 samples, 3.23%)</title><rect x="898.3" y="485" width="38.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="901.35" y="495.5" >std..</text>
</g>
<g >
<title>std::tuple&lt;unsigned long long&amp;&amp;&gt; std::forward_as_tuple&lt;unsigned long long&gt; (2,907,943 samples, 1.57%)</title><rect x="107.9" y="373" width="18.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="110.95" y="383.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (21,391,370 samples, 11.52%)</title><rect x="256.7" y="261" width="135.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="259.65" y="271.5" >alloc_pages_mpol</text>
</g>
<g >
<title>vm_munmap (1,165,799 samples, 0.63%)</title><rect x="971.6" y="405" width="7.4" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="974.63" y="415.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (49,561 samples, 0.03%)</title><rect x="536.5" y="261" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="539.50" y="271.5" ></text>
</g>
<g >
<title>std::map&lt;unsigned long long, Span*, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::lower_bound (1,423,253 samples, 0.77%)</title><rect x="552.0" y="437" width="9.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="555.02" y="447.5" ></text>
</g>
<g >
<title>_raw_spin_lock (751,070 samples, 0.40%)</title><rect x="814.0" y="293" width="4.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="816.98" y="303.5" ></text>
</g>
<g >
<title>[unknown] (69,705 samples, 0.04%)</title><rect x="10.0" y="597" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (1,165,799 samples, 0.63%)</title><rect x="971.6" y="485" width="7.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="974.63" y="495.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (2,040,295 samples, 1.10%)</title><rect x="355.2" y="181" width="13.0" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="358.19" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_erase (954,344 samples, 0.51%)</title><rect x="1055.7" y="533" width="6.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1058.71" y="543.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="501" width="9.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1019.59" y="511.5" ></text>
</g>
<g >
<title>mprotect_fixup (2,066,101 samples, 1.11%)</title><rect x="1026.5" y="501" width="13.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1029.50" y="511.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (920,431 samples, 0.50%)</title><rect x="1102.4" y="309" width="5.8" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1105.36" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_erase (954,344 samples, 0.51%)</title><rect x="1055.7" y="517" width="6.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1058.71" y="527.5" ></text>
</g>
<g >
<title>[unknown] (709,615 samples, 0.38%)</title><rect x="568.2" y="421" width="4.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="571.23" y="431.5" ></text>
</g>
<g >
<title>futex_wait (693,022 samples, 0.37%)</title><rect x="763.0" y="325" width="4.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="765.96" y="335.5" ></text>
</g>
<g >
<title>do_futex (10,066,081 samples, 5.42%)</title><rect x="798.1" y="325" width="64.0" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="801.14" y="335.5" >do_futex</text>
</g>
<g >
<title>Span::Span (2,727,163 samples, 1.47%)</title><rect x="999.3" y="501" width="17.3" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="1002.26" y="511.5" ></text>
</g>
<g >
<title>std::less&lt;unsigned long long&gt;::operator (733,305 samples, 0.40%)</title><rect x="541.6" y="405" width="4.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="544.62" y="415.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I__ZN12CentralCache6_sInstE (2,727,163 samples, 1.47%)</title><rect x="999.3" y="581" width="17.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1002.26" y="591.5" ></text>
</g>
<g >
<title>x64_sys_call (2,319,150 samples, 1.25%)</title><rect x="950.1" y="533" width="14.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="953.14" y="543.5" ></text>
</g>
<g >
<title>schedule_tail (141,102 samples, 0.08%)</title><rect x="1081.6" y="549" width="0.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1084.60" y="559.5" ></text>
</g>
<g >
<title>down_write (1,999,417 samples, 1.08%)</title><rect x="84.8" y="229" width="12.7" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="87.78" y="239.5" ></text>
</g>
<g >
<title>lru_add_fn (2,479,528 samples, 1.34%)</title><rect x="392.6" y="245" width="15.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="395.62" y="255.5" ></text>
</g>
<g >
<title>load_elf_binary (69,705 samples, 0.04%)</title><rect x="10.0" y="437" width="0.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>folio_remove_rmap_ptes (920,431 samples, 0.50%)</title><rect x="1102.4" y="357" width="5.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1105.36" y="367.5" ></text>
</g>
<g >
<title>PageCache::MapObjectToSpan (62,279,469 samples, 33.55%)</title><rect x="491.3" y="469" width="395.9" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="494.35" y="479.5" >PageCache::MapObjectToSpan</text>
</g>
<g >
<title>dequeue_task_fair (2,595,349 samples, 1.40%)</title><rect x="653.4" y="213" width="16.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="656.36" y="223.5" ></text>
</g>
<g >
<title>do_exit (8,740,193 samples, 4.71%)</title><rect x="1083.6" y="517" width="55.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1086.61" y="527.5" >do_exit</text>
</g>
<g >
<title>up_read (7,225,387 samples, 3.89%)</title><rect x="426.8" y="357" width="45.9" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="429.78" y="367.5" >up_r..</text>
</g>
<g >
<title>__x64_sys_mmap (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="533" width="9.9" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1019.59" y="543.5" ></text>
</g>
<g >
<title>__vm_munmap (1,165,799 samples, 0.63%)</title><rect x="971.6" y="389" width="7.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="974.63" y="399.5" ></text>
</g>
<g >
<title>rwsem_optimistic_spin (1,999,417 samples, 1.08%)</title><rect x="84.8" y="197" width="12.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="87.78" y="207.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, BenchmarkConcurrentMalloc (139,430,600 samples, 75.11%)</title><rect x="12.1" y="517" width="886.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="15.10" y="527.5" >void std::__invoke_impl&lt;void, BenchmarkConcurrentMalloc</text>
</g>
<g >
<title>rmqueue_bulk (3,848,410 samples, 2.07%)</title><rect x="368.2" y="181" width="24.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="371.16" y="191.5" >r..</text>
</g>
<g >
<title>__mmput (8,740,193 samples, 4.71%)</title><rect x="1083.6" y="469" width="55.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1086.61" y="479.5" >__mmput</text>
</g>
<g >
<title>void*&amp; std::vector&lt;void*, std::allocator&lt;void*&gt; &gt;::emplace_back&lt;void*&gt; (5,990,850 samples, 3.23%)</title><rect x="898.3" y="469" width="38.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="901.35" y="479.5" >voi..</text>
</g>
<g >
<title>bprm_execve (1,165,799 samples, 0.63%)</title><rect x="971.6" y="501" width="7.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="974.63" y="511.5" ></text>
</g>
<g >
<title>scheduler_tick (2,040,295 samples, 1.10%)</title><rect x="355.2" y="69" width="13.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="358.19" y="79.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (3,946,330 samples, 2.13%)</title><rect x="862.1" y="389" width="25.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="865.13" y="399.5" >e..</text>
</g>
<g >
<title>update_rq_clock (922,308 samples, 0.50%)</title><rect x="718.6" y="229" width="5.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="721.59" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;BenchmarkMalloc (6,662,350 samples, 3.59%)</title><rect x="898.3" y="533" width="42.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="901.35" y="543.5" >std..</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (2,040,295 samples, 1.10%)</title><rect x="355.2" y="165" width="13.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="358.19" y="175.5" ></text>
</g>
<g >
<title>std::map&lt;unsigned long long, Span*, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::~map (954,344 samples, 0.51%)</title><rect x="1055.7" y="565" width="6.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1058.71" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;void*&gt;::allocate (334,433 samples, 0.18%)</title><rect x="936.4" y="437" width="2.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="939.43" y="447.5" ></text>
</g>
<g >
<title>smp_call_function_many_cond (1,006,950 samples, 0.54%)</title><rect x="1083.6" y="373" width="6.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1086.61" y="383.5" ></text>
</g>
<g >
<title>x64_sys_call (69,705 samples, 0.04%)</title><rect x="10.0" y="549" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>do_user_addr_fault (578,487 samples, 0.31%)</title><rect x="1077.9" y="549" width="3.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1080.92" y="559.5" ></text>
</g>
<g >
<title>exc_page_fault (45,655,093 samples, 24.59%)</title><rect x="182.5" y="389" width="290.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="185.51" y="399.5" >exc_page_fault</text>
</g>
<g >
<title>plist_add (715,804 samples, 0.39%)</title><rect x="644.7" y="261" width="4.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="647.66" y="271.5" ></text>
</g>
<g >
<title>alloc_anon_folio (21,391,370 samples, 11.52%)</title><rect x="256.7" y="293" width="135.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="259.65" y="303.5" >alloc_anon_folio</text>
</g>
<g >
<title>folio_add_lru (2,479,528 samples, 1.34%)</title><rect x="392.6" y="277" width="15.8" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="395.62" y="287.5" ></text>
</g>
<g >
<title>release_pages (1,012,111 samples, 0.55%)</title><rect x="1090.0" y="389" width="6.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1093.01" y="399.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (2,626,868 samples, 1.41%)</title><rect x="1156.5" y="581" width="16.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1159.47" y="591.5" ></text>
</g>
<g >
<title>dequeue_task (2,595,349 samples, 1.40%)</title><rect x="653.4" y="229" width="16.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="656.36" y="239.5" ></text>
</g>
<g >
<title>__mprotect (4,594,723 samples, 2.47%)</title><rect x="1026.5" y="597" width="29.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1029.50" y="607.5" >__..</text>
</g>
<g >
<title>irqentry_exit_to_user_mode (49,561 samples, 0.03%)</title><rect x="536.5" y="309" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="539.50" y="319.5" ></text>
</g>
<g >
<title>vfs_write (2,319,150 samples, 1.25%)</title><rect x="950.1" y="485" width="14.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="953.14" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,165,799 samples, 0.63%)</title><rect x="971.6" y="581" width="7.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="974.63" y="591.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::tuple&lt;BenchmarkMalloc (340,360 samples, 0.18%)</title><rect x="940.7" y="533" width="2.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="943.69" y="543.5" ></text>
</g>
<g >
<title>__rseq_handle_notify_resume (1,042,264 samples, 0.56%)</title><rect x="587.1" y="341" width="6.6" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="590.06" y="351.5" ></text>
</g>
<g >
<title>std::map&lt;unsigned long long, Span*, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::find (6,864,675 samples, 3.70%)</title><rect x="508.4" y="453" width="43.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="511.38" y="463.5" >std:..</text>
</g>
<g >
<title>bprm_execve.part.0 (69,705 samples, 0.04%)</title><rect x="10.0" y="485" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wake (14,714,793 samples, 7.93%)</title><rect x="793.7" y="405" width="93.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="796.68" y="415.5" >__GI___lll_..</text>
</g>
<g >
<title>do_anonymous_page (2,626,868 samples, 1.41%)</title><rect x="1156.5" y="485" width="16.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1159.47" y="495.5" ></text>
</g>
<g >
<title>CentralCache::ReleaseListToSpans (799,089 samples, 0.43%)</title><rect x="887.2" y="437" width="5.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="890.21" y="447.5" ></text>
</g>
<g >
<title>unmap_page_range (6,721,132 samples, 3.62%)</title><rect x="1096.4" y="405" width="42.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1099.44" y="415.5" >unma..</text>
</g>
<g >
<title>ret_from_fork_asm (141,102 samples, 0.08%)</title><rect x="1081.6" y="581" width="0.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1084.60" y="591.5" ></text>
</g>
<g >
<title>x64_sys_call (2,066,101 samples, 1.11%)</title><rect x="1026.5" y="549" width="13.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1029.50" y="559.5" ></text>
</g>
<g >
<title>x64_sys_call (24,920,101 samples, 13.42%)</title><rect x="609.0" y="357" width="158.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="611.97" y="367.5" >x64_sys_call</text>
</g>
<g >
<title>__mod_lruvec_state (920,431 samples, 0.50%)</title><rect x="1102.4" y="325" width="5.8" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1105.36" y="335.5" ></text>
</g>
<g >
<title>__futex_queue (683,547 samples, 0.37%)</title><rect x="623.5" y="277" width="4.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="626.54" y="287.5" ></text>
</g>
<g >
<title>__futex_wait (21,935,730 samples, 11.82%)</title><rect x="623.5" y="293" width="139.5" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="626.54" y="303.5" >__futex_wait</text>
</g>
<g >
<title>sched_clock (922,308 samples, 0.50%)</title><rect x="718.6" y="197" width="5.9" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="721.59" y="207.5" ></text>
</g>
<g >
<title>__smp_call_single_queue (2,817,855 samples, 1.52%)</title><rect x="844.2" y="245" width="17.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="847.22" y="255.5" ></text>
</g>
<g >
<title>exec_binprm (1,165,799 samples, 0.63%)</title><rect x="971.6" y="469" width="7.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="974.63" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (69,705 samples, 0.04%)</title><rect x="10.0" y="565" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (2,040,295 samples, 1.10%)</title><rect x="355.2" y="117" width="13.0" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="358.19" y="127.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (1,012,111 samples, 0.55%)</title><rect x="1090.0" y="421" width="6.4" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1093.01" y="431.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,540,342 samples, 1.37%)</title><rect x="1061.8" y="597" width="16.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1064.77" y="607.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (972,216 samples, 0.52%)</title><rect x="1120.7" y="245" width="6.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1123.67" y="255.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (4,870,310 samples, 2.62%)</title><rect x="1108.2" y="357" width="31.0" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1111.21" y="367.5" >tl..</text>
</g>
<g >
<title>x64_sys_call (1,999,417 samples, 1.08%)</title><rect x="84.8" y="341" width="12.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="87.78" y="351.5" ></text>
</g>
<g >
<title>__free_one_page (959,950 samples, 0.52%)</title><rect x="1114.6" y="245" width="6.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1117.57" y="255.5" ></text>
</g>
<g >
<title>all (185,645,898 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>std::map&lt;unsigned long long, Span*, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::end (2,679,948 samples, 1.44%)</title><rect x="491.3" y="453" width="17.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="494.35" y="463.5" ></text>
</g>
<g >
<title>_compound_head (930,391 samples, 0.50%)</title><rect x="1096.4" y="373" width="6.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1099.44" y="383.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (2,040,295 samples, 1.10%)</title><rect x="355.2" y="149" width="13.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="358.19" y="159.5" ></text>
</g>
<g >
<title>__alloc_pages (578,487 samples, 0.31%)</title><rect x="1077.9" y="405" width="3.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1080.92" y="415.5" ></text>
</g>
<g >
<title>irqentry_exit (49,561 samples, 0.03%)</title><rect x="536.5" y="325" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="539.50" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_S_key (2,464,453 samples, 1.33%)</title><rect x="526.0" y="405" width="15.6" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="528.96" y="415.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (2,066,101 samples, 1.11%)</title><rect x="1026.5" y="517" width="13.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1029.50" y="527.5" ></text>
</g>
<g >
<title>update_process_times (2,040,295 samples, 1.10%)</title><rect x="355.2" y="85" width="13.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="358.19" y="95.5" ></text>
</g>
<g >
<title>NextObj (710,243 samples, 0.38%)</title><rect x="486.8" y="437" width="4.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="489.84" y="447.5" ></text>
</g>
<g >
<title>__pte_alloc (578,487 samples, 0.31%)</title><rect x="1077.9" y="469" width="3.7" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="1080.92" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_lower_bound (1,423,253 samples, 0.77%)</title><rect x="552.0" y="405" width="9.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="555.02" y="415.5" ></text>
</g>
<g >
<title>unmap_single_vma (6,721,132 samples, 3.62%)</title><rect x="1096.4" y="421" width="42.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1099.44" y="431.5" >unma..</text>
</g>
<g >
<title>do_syscall_64 (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="565" width="9.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1019.59" y="575.5" ></text>
</g>
<g >
<title>switch_fpu_return (831,100 samples, 0.45%)</title><rect x="598.9" y="341" width="5.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="601.86" y="351.5" ></text>
</g>
<g >
<title>CentralCache::CentralCache (2,727,163 samples, 1.47%)</title><rect x="999.3" y="549" width="17.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1002.26" y="559.5" ></text>
</g>
<g >
<title>exc_page_fault (2,727,163 samples, 1.47%)</title><rect x="999.3" y="469" width="17.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1002.26" y="479.5" ></text>
</g>
<g >
<title>load_elf_binary (1,165,799 samples, 0.63%)</title><rect x="971.6" y="437" width="7.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="974.63" y="447.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1,932,166 samples, 1.04%)</title><rect x="1114.6" y="261" width="12.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1117.57" y="271.5" ></text>
</g>
<g >
<title>__handle_mm_fault (578,487 samples, 0.31%)</title><rect x="1077.9" y="517" width="3.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1080.92" y="527.5" ></text>
</g>
<g >
<title>tty_write (2,319,150 samples, 1.25%)</title><rect x="950.1" y="469" width="14.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="953.14" y="479.5" ></text>
</g>
<g >
<title>do_futex (23,050,245 samples, 12.42%)</title><rect x="616.5" y="325" width="146.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="619.45" y="335.5" >do_futex</text>
</g>
<g >
<title>tc_malloc11 (185,576,193 samples, 99.96%)</title><rect x="10.4" y="613" width="1179.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.44" y="623.5" >tc_malloc11</text>
</g>
<g >
<title>strcmp (3,081,830 samples, 1.66%)</title><rect x="979.0" y="581" width="19.6" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="982.04" y="591.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (972,216 samples, 0.52%)</title><rect x="1120.7" y="197" width="6.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1123.67" y="207.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (14,714,793 samples, 7.93%)</title><rect x="793.7" y="453" width="93.5" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="796.68" y="463.5" >std::unique..</text>
</g>
<g >
<title>futex_unqueue (970,165 samples, 0.52%)</title><rect x="627.9" y="277" width="6.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="630.88" y="287.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (2,894,197 samples, 1.56%)</title><rect x="408.4" y="293" width="18.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="411.38" y="303.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (69,705 samples, 0.04%)</title><rect x="10.0" y="517" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>__lruvec_stat_mod_folio (2,626,868 samples, 1.41%)</title><rect x="1156.5" y="453" width="16.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1159.47" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (798,364 samples, 0.43%)</title><rect x="582.0" y="389" width="5.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="584.99" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,768,463 samples, 5.80%)</title><rect x="793.7" y="373" width="68.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="796.68" y="383.5" >do_sysc..</text>
</g>
<g >
<title>syscall_exit_to_user_mode (2,687,967 samples, 1.45%)</title><rect x="587.1" y="357" width="17.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="590.06" y="367.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (93,351 samples, 0.05%)</title><rect x="998.6" y="549" width="0.6" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1001.63" y="559.5" ></text>
</g>
<g >
<title>PageCache::NewSpan (10,240,282 samples, 5.52%)</title><rect x="61.3" y="405" width="65.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="64.34" y="415.5" >PageCac..</text>
</g>
<g >
<title>mmap_region (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="469" width="9.9" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1019.59" y="479.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (141,102 samples, 0.08%)</title><rect x="1081.6" y="517" width="0.9" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1084.60" y="527.5" ></text>
</g>
<g >
<title>sched_clock_cpu (922,308 samples, 0.50%)</title><rect x="718.6" y="213" width="5.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="721.59" y="223.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (3,440,872 samples, 1.85%)</title><rect x="767.4" y="389" width="21.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="770.37" y="399.5" >e..</text>
</g>
<g >
<title>PageCache::~PageCache (954,344 samples, 0.51%)</title><rect x="1055.7" y="581" width="6.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1058.71" y="591.5" ></text>
</g>
<g >
<title>psi_group_change (1,445,488 samples, 0.78%)</title><rect x="704.8" y="213" width="9.2" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="707.78" y="223.5" ></text>
</g>
<g >
<title>_int_free (1,061,827 samples, 0.57%)</title><rect x="964.9" y="581" width="6.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="967.88" y="591.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode_prepare (759,145 samples, 0.41%)</title><rect x="604.1" y="357" width="4.9" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="607.15" y="367.5" ></text>
</g>
<g >
<title>do_anonymous_page (578,487 samples, 0.31%)</title><rect x="1077.9" y="485" width="3.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1080.92" y="495.5" ></text>
</g>
<g >
<title>ConcurrentFree (64,031,627 samples, 34.49%)</title><rect x="491.3" y="485" width="407.0" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="494.35" y="495.5" >ConcurrentFree</text>
</g>
<g >
<title>search_binary_handler (1,165,799 samples, 0.63%)</title><rect x="971.6" y="453" width="7.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="974.63" y="463.5" ></text>
</g>
<g >
<title>perf_event_task_tick (2,040,295 samples, 1.10%)</title><rect x="355.2" y="53" width="13.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="358.19" y="63.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,768,463 samples, 5.80%)</title><rect x="793.7" y="389" width="68.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="796.68" y="399.5" >entry_S..</text>
</g>
<g >
<title>free_unref_page_commit (2,932,716 samples, 1.58%)</title><rect x="1108.2" y="277" width="18.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1111.21" y="287.5" ></text>
</g>
<g >
<title>rmqueue (3,848,410 samples, 2.07%)</title><rect x="368.2" y="213" width="24.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="371.16" y="223.5" >r..</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_erase (954,344 samples, 0.51%)</title><rect x="1055.7" y="421" width="6.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1058.71" y="431.5" ></text>
</g>
<g >
<title>handle_mm_fault (36,540,277 samples, 19.68%)</title><rect x="194.5" y="357" width="232.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="197.52" y="367.5" >handle_mm_fault</text>
</g>
<g >
<title>do_vmi_munmap (1,165,799 samples, 0.63%)</title><rect x="971.6" y="373" width="7.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="974.63" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;void*, std::allocator&lt;void*&gt; &gt;::back (2,938,007 samples, 1.58%)</title><rect x="898.3" y="453" width="18.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="901.35" y="463.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (814,603 samples, 0.44%)</title><rect x="593.7" y="341" width="5.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="596.69" y="351.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1,012,111 samples, 0.55%)</title><rect x="1090.0" y="405" width="6.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1093.01" y="415.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unlock (14,714,793 samples, 7.93%)</title><rect x="793.7" y="437" width="93.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="796.68" y="447.5" >std::unique..</text>
</g>
<g >
<title>sched_clock_noinstr (922,308 samples, 0.50%)</title><rect x="718.6" y="181" width="5.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="721.59" y="191.5" ></text>
</g>
<g >
<title>error_entry (2,223,724 samples, 1.20%)</title><rect x="472.7" y="405" width="14.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="475.70" y="415.5" ></text>
</g>
<g >
<title>__GI___futex_abstimed_wait_cancelable64 (98,769 samples, 0.05%)</title><rect x="998.6" y="597" width="0.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1001.63" y="607.5" ></text>
</g>
<g >
<title>bprm_execve (69,705 samples, 0.04%)</title><rect x="10.0" y="501" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,066,101 samples, 1.11%)</title><rect x="1026.5" y="581" width="13.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1029.50" y="591.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;BenchmarkConcurrentMalloc (139,430,600 samples, 75.11%)</title><rect x="12.1" y="565" width="886.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="15.10" y="575.5" >std::thread::_Invoker&lt;std::tuple&lt;BenchmarkConcurrentMalloc</text>
</g>
<g >
<title>SpanList::SpanList (2,727,163 samples, 1.47%)</title><rect x="999.3" y="533" width="17.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1002.26" y="543.5" ></text>
</g>
<g >
<title>rcu_pending (972,216 samples, 0.52%)</title><rect x="1120.7" y="85" width="6.1" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1123.67" y="95.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,999,417 samples, 1.08%)</title><rect x="84.8" y="357" width="12.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="87.78" y="367.5" ></text>
</g>
<g >
<title>process_output_block (2,319,150 samples, 1.25%)</title><rect x="950.1" y="421" width="14.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="953.14" y="431.5" ></text>
</g>
<g >
<title>x2apic_send_IPI (1,933,686 samples, 1.04%)</title><rect x="849.8" y="213" width="12.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="852.84" y="223.5" ></text>
</g>
<g >
<title>clear_page_erms (17,542,960 samples, 9.45%)</title><rect x="256.7" y="213" width="111.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="259.65" y="223.5" >clear_page_erms</text>
</g>
<g >
<title>__memcg_slab_post_alloc_hook (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="421" width="9.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1019.59" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (98,769 samples, 0.05%)</title><rect x="998.6" y="581" width="0.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1001.63" y="591.5" ></text>
</g>
<g >
<title>unmap_vmas (6,721,132 samples, 3.62%)</title><rect x="1096.4" y="437" width="42.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1099.44" y="447.5" >unma..</text>
</g>
<g >
<title>__GI___libc_write (2,319,150 samples, 1.25%)</title><rect x="950.1" y="581" width="14.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="953.14" y="591.5" ></text>
</g>
<g >
<title>pte_alloc_one (578,487 samples, 0.31%)</title><rect x="1077.9" y="453" width="3.7" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1080.92" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_S_right (954,344 samples, 0.51%)</title><rect x="1055.7" y="389" width="6.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1058.71" y="399.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (1,006,950 samples, 0.54%)</title><rect x="1083.6" y="389" width="6.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1086.61" y="399.5" ></text>
</g>
<g >
<title>try_charge_memcg (2,333,637 samples, 1.26%)</title><rect x="241.8" y="277" width="14.9" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="244.82" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_write (2,319,150 samples, 1.25%)</title><rect x="950.1" y="517" width="14.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="953.14" y="527.5" ></text>
</g>
<g >
<title>do_mmap (1,999,417 samples, 1.08%)</title><rect x="84.8" y="277" width="12.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="87.78" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_futex (10,066,081 samples, 5.42%)</title><rect x="798.1" y="341" width="64.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="801.14" y="351.5" >__x64_s..</text>
</g>
<g >
<title>folio_add_new_anon_rmap (2,626,868 samples, 1.41%)</title><rect x="1156.5" y="469" width="16.7" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1159.47" y="479.5" ></text>
</g>
<g >
<title>get_page_from_freelist (21,391,370 samples, 11.52%)</title><rect x="256.7" y="229" width="135.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="259.65" y="239.5" >get_page_from_fre..</text>
</g>
<g >
<title>[unknown] (8,774,967 samples, 4.73%)</title><rect x="942.9" y="597" width="55.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="945.86" y="607.5" >[unkn..</text>
</g>
<g >
<title>__handle_mm_fault (2,626,868 samples, 1.41%)</title><rect x="1156.5" y="517" width="16.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1159.47" y="527.5" ></text>
</g>
<g >
<title>dequeue_task_fair (684,752 samples, 0.37%)</title><rect x="669.9" y="229" width="4.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="672.85" y="239.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (141,102 samples, 0.08%)</title><rect x="1081.6" y="533" width="0.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1084.60" y="543.5" ></text>
</g>
<g >
<title>free_unref_page_list (2,932,716 samples, 1.58%)</title><rect x="1108.2" y="293" width="18.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1111.21" y="303.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;BenchmarkMalloc (7,002,710 samples, 3.77%)</title><rect x="898.3" y="581" width="44.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="901.35" y="591.5" >std:..</text>
</g>
<g >
<title>finish_task_switch.isra.0 (1,461,286 samples, 0.79%)</title><rect x="674.2" y="229" width="9.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="677.21" y="239.5" ></text>
</g>
<g >
<title>schedule (49,561 samples, 0.03%)</title><rect x="536.5" y="293" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="539.50" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;void*, std::allocator&lt;void*&gt; &gt;::_M_allocate (334,433 samples, 0.18%)</title><rect x="936.4" y="469" width="2.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="939.43" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="581" width="9.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1019.59" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_lower_bound (5,962,156 samples, 3.21%)</title><rect x="508.4" y="421" width="37.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="511.38" y="431.5" >std..</text>
</g>
<g >
<title>sysmalloc (5,349,729 samples, 2.88%)</title><rect x="1139.2" y="597" width="34.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1142.16" y="607.5" >sy..</text>
</g>
<g >
<title>entry_SYSCALL_64 (709,615 samples, 0.38%)</title><rect x="568.2" y="389" width="4.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="571.23" y="399.5" ></text>
</g>
<g >
<title>sysvec_reschedule_ipi (49,561 samples, 0.03%)</title><rect x="536.5" y="341" width="0.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="539.50" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;::_Rb_tree_iterator (1,059,334 samples, 0.57%)</title><rect x="501.7" y="421" width="6.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="504.65" y="431.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (1,006,950 samples, 0.54%)</title><rect x="1083.6" y="421" width="6.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1086.61" y="431.5" ></text>
</g>
<g >
<title>handle_mm_fault (578,487 samples, 0.31%)</title><rect x="1077.9" y="533" width="3.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1080.92" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_lower_bound (1,244,002 samples, 0.67%)</title><rect x="61.3" y="325" width="7.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="64.34" y="335.5" ></text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (2,727,163 samples, 1.47%)</title><rect x="999.3" y="597" width="17.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1002.26" y="607.5" ></text>
</g>
<g >
<title>tick_sched_handle (2,040,295 samples, 1.10%)</title><rect x="355.2" y="101" width="13.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="358.19" y="111.5" ></text>
</g>
<g >
<title>file_tty_write.constprop.0 (2,319,150 samples, 1.25%)</title><rect x="950.1" y="453" width="14.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="953.14" y="463.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (4,379,438 samples, 2.36%)</title><rect x="214.0" y="277" width="27.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="216.98" y="287.5" >m..</text>
</g>
<g >
<title>__x64_sys_futex (23,743,267 samples, 12.79%)</title><rect x="616.5" y="341" width="150.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="619.45" y="351.5" >__x64_sys_futex</text>
</g>
<g >
<title>SpanList::Empty (2,443,949 samples, 1.32%)</title><rect x="69.2" y="389" width="15.6" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="72.25" y="399.5" ></text>
</g>
<g >
<title>exec_binprm (69,705 samples, 0.04%)</title><rect x="10.0" y="469" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_mprotect (2,066,101 samples, 1.11%)</title><rect x="1026.5" y="533" width="13.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1029.50" y="543.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (2,040,295 samples, 1.10%)</title><rect x="355.2" y="133" width="13.0" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="358.19" y="143.5" ></text>
</g>
<g >
<title>wake_up_q (6,823,170 samples, 3.68%)</title><rect x="818.8" y="293" width="43.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="821.76" y="303.5" >wake..</text>
</g>
<g >
<title>consume_stock (2,333,637 samples, 1.26%)</title><rect x="241.8" y="261" width="14.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="244.82" y="271.5" ></text>
</g>
<g >
<title>ttwu_queue_wakelist (2,817,855 samples, 1.52%)</title><rect x="844.2" y="261" width="17.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="847.22" y="271.5" ></text>
</g>
<g >
<title>do_user_addr_fault (2,727,163 samples, 1.47%)</title><rect x="999.3" y="453" width="17.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1002.26" y="463.5" ></text>
</g>
<g >
<title>vma_expand (1,999,417 samples, 1.08%)</title><rect x="84.8" y="245" width="12.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="87.78" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (28,367,213 samples, 15.28%)</title><rect x="587.1" y="389" width="180.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="590.06" y="399.5" >entry_SYSCALL_64_after_..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (1,165,799 samples, 0.63%)</title><rect x="971.6" y="517" width="7.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="974.63" y="527.5" ></text>
</g>
<g >
<title>perf_pmu_nop_void (113,715 samples, 0.06%)</title><rect x="1081.8" y="501" width="0.7" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="1084.77" y="511.5" ></text>
</g>
<g >
<title>exc_page_fault (578,487 samples, 0.31%)</title><rect x="1077.9" y="565" width="3.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1080.92" y="575.5" ></text>
</g>
<g >
<title>down_read_trylock (1,889,429 samples, 1.02%)</title><rect x="182.5" y="357" width="12.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="185.51" y="367.5" ></text>
</g>
<g >
<title>vma_alloc_folio (21,391,370 samples, 11.52%)</title><rect x="256.7" y="277" width="135.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="259.65" y="287.5" >vma_alloc_folio</text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;::_M_addr (905,046 samples, 0.49%)</title><rect x="531.1" y="373" width="5.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="534.06" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_S_right (753,215 samples, 0.41%)</title><rect x="556.3" y="389" width="4.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="559.28" y="399.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wake (709,615 samples, 0.38%)</title><rect x="568.2" y="405" width="4.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="571.23" y="415.5" ></text>
</g>
<g >
<title>ThreadCache::FetchFromCentralCache (73,727,562 samples, 39.71%)</title><rect x="22.7" y="453" width="468.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="25.72" y="463.5" >ThreadCache::FetchFromCentralCache</text>
</g>
<g >
<title>__schedule (49,561 samples, 0.03%)</title><rect x="536.5" y="277" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="539.50" y="287.5" ></text>
</g>
<g >
<title>native_write_msr (1,933,686 samples, 1.04%)</title><rect x="849.8" y="197" width="12.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="852.84" y="207.5" ></text>
</g>
<g >
<title>native_sched_clock (922,308 samples, 0.50%)</title><rect x="718.6" y="165" width="5.9" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="721.59" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_erase (954,344 samples, 0.51%)</title><rect x="1055.7" y="437" width="6.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1058.71" y="447.5" ></text>
</g>
<g >
<title>rmqueue (285,397 samples, 0.15%)</title><rect x="1079.8" y="389" width="1.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1082.78" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (28,367,213 samples, 15.28%)</title><rect x="587.1" y="373" width="180.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="590.06" y="383.5" >do_syscall_64</text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;::_M_ptr (803,172 samples, 0.43%)</title><rect x="526.0" y="389" width="5.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="528.96" y="399.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1,999,417 samples, 1.08%)</title><rect x="84.8" y="293" width="12.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="87.78" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;void*, std::allocator&lt;void*&gt; &gt;::reserve (671,500 samples, 0.36%)</title><rect x="936.4" y="485" width="4.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="939.43" y="495.5" ></text>
</g>
<g >
<title>__get_user_nocheck_4 (3,332,098 samples, 1.79%)</title><rect x="737.1" y="261" width="21.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="740.09" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (8,740,193 samples, 4.71%)</title><rect x="1083.6" y="581" width="55.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1086.61" y="591.5" >do_sy..</text>
</g>
<g >
<title>std::mutex::lock (34,027,523 samples, 18.33%)</title><rect x="577.4" y="421" width="216.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="580.39" y="431.5" >std::mutex::lock</text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (751,070 samples, 0.40%)</title><rect x="814.0" y="277" width="4.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="816.98" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (146,693,984 samples, 79.02%)</title><rect x="10.4" y="597" width="932.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="13.44" y="607.5" >[libstdc++.so.6.0.30]</text>
</g>
<g >
<title>elf_load (1,165,799 samples, 0.63%)</title><rect x="971.6" y="421" width="7.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="974.63" y="431.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;BenchmarkMalloc (7,002,710 samples, 3.77%)</title><rect x="898.3" y="565" width="44.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="901.35" y="575.5" >std:..</text>
</g>
<g >
<title>std::less&lt;unsigned long long&gt;::operator (902,519 samples, 0.49%)</title><rect x="546.3" y="421" width="5.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="549.28" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;::_M_valptr (1,661,281 samples, 0.89%)</title><rect x="531.1" y="389" width="10.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="534.06" y="399.5" ></text>
</g>
<g >
<title>native_flush_tlb_multi (1,006,950 samples, 0.54%)</title><rect x="1083.6" y="405" width="6.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1086.61" y="415.5" ></text>
</g>
<g >
<title>perf-exec (69,705 samples, 0.04%)</title><rect x="10.0" y="613" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>handle_pte_fault (36,540,277 samples, 19.68%)</title><rect x="194.5" y="325" width="232.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="197.52" y="335.5" >handle_pte_fault</text>
</g>
<g >
<title>std::map&lt;unsigned long long, Span*, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::operator[] (1,423,253 samples, 0.77%)</title><rect x="552.0" y="453" width="9.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="555.02" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_execve (1,165,799 samples, 0.63%)</title><rect x="971.6" y="533" width="7.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="974.63" y="543.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (972,216 samples, 0.52%)</title><rect x="1120.7" y="213" width="6.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1123.67" y="223.5" ></text>
</g>
<g >
<title>available_idle_cpu (1,514,499 samples, 0.82%)</title><rect x="834.6" y="229" width="9.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="837.59" y="239.5" ></text>
</g>
<g >
<title>rwsem_down_write_slowpath (1,999,417 samples, 1.08%)</title><rect x="84.8" y="213" width="12.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="87.78" y="223.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;BenchmarkMalloc (7,002,710 samples, 3.77%)</title><rect x="898.3" y="549" width="44.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="901.35" y="559.5" >void..</text>
</g>
<g >
<title>tick_nohz_highres_handler (972,216 samples, 0.52%)</title><rect x="1120.7" y="149" width="6.1" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1123.67" y="159.5" ></text>
</g>
<g >
<title>do_anonymous_page (35,257,451 samples, 18.99%)</title><rect x="202.7" y="309" width="224.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="205.67" y="319.5" >do_anonymous_page</text>
</g>
<g >
<title>CentralCache::GetOneSpan (71,455,562 samples, 38.49%)</title><rect x="32.7" y="421" width="454.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="35.65" y="431.5" >CentralCache::GetOneSpan</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::find (6,864,675 samples, 3.70%)</title><rect x="508.4" y="437" width="43.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="511.38" y="447.5" >std:..</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::lock (35,469,483 samples, 19.11%)</title><rect x="568.2" y="437" width="225.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="571.23" y="447.5" >std::unique_lock&lt;std::mutex&gt;:..</text>
</g>
<g >
<title>_IO_fflush (1,146,361 samples, 0.62%)</title><rect x="942.9" y="581" width="7.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="945.86" y="591.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (2,727,163 samples, 1.47%)</title><rect x="999.3" y="485" width="17.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1002.26" y="495.5" ></text>
</g>
<g >
<title>folio_add_lru_vma (2,479,528 samples, 1.34%)</title><rect x="392.6" y="293" width="15.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="395.62" y="303.5" ></text>
</g>
<g >
<title>pick_next_task (707,154 samples, 0.38%)</title><rect x="683.5" y="229" width="4.5" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="686.50" y="239.5" ></text>
</g>
<g >
<title>ThreadCache::Allocate (73,727,562 samples, 39.71%)</title><rect x="22.7" y="469" width="468.6" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="25.72" y="479.5" >ThreadCache::Allocate</text>
</g>
<g >
<title>search_binary_handler (69,705 samples, 0.04%)</title><rect x="10.0" y="453" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>__msecs_to_jiffies (707,154 samples, 0.38%)</title><rect x="683.5" y="197" width="4.5" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="686.50" y="207.5" ></text>
</g>
<g >
<title>release_pages (4,870,310 samples, 2.62%)</title><rect x="1108.2" y="309" width="31.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1111.21" y="319.5" >re..</text>
</g>
<g >
<title>pthread_mutex_lock@@GLIBC_2.2.5 (799,089 samples, 0.43%)</title><rect x="887.2" y="405" width="5.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="890.21" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,319,150 samples, 1.25%)</title><rect x="950.1" y="549" width="14.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="953.14" y="559.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (972,216 samples, 0.52%)</title><rect x="1120.7" y="181" width="6.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1123.67" y="191.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (4,870,310 samples, 2.62%)</title><rect x="1108.2" y="341" width="31.0" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1111.21" y="351.5" >tl..</text>
</g>
<g >
<title>restore_fpregs_from_fpstate (93,351 samples, 0.05%)</title><rect x="998.6" y="517" width="0.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1001.63" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;::_M_addr (756,235 samples, 0.41%)</title><rect x="536.8" y="357" width="4.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="539.81" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::lower_bound (1,423,253 samples, 0.77%)</title><rect x="552.0" y="421" width="9.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="555.02" y="431.5" ></text>
</g>
<g >
<title>ThreadCache::Deallocate (799,089 samples, 0.43%)</title><rect x="887.2" y="469" width="5.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="890.21" y="479.5" ></text>
</g>
<g >
<title>prepare_task_switch (1,864,623 samples, 1.00%)</title><rect x="688.0" y="229" width="11.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="690.99" y="239.5" ></text>
</g>
<g >
<title>tick_sched_handle (972,216 samples, 0.52%)</title><rect x="1120.7" y="133" width="6.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1123.67" y="143.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (698,643 samples, 0.38%)</title><rect x="789.2" y="405" width="4.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="792.24" y="415.5" ></text>
</g>
<g >
<title>BenchmarkMalloc (6,662,350 samples, 3.59%)</title><rect x="898.3" y="501" width="42.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="901.35" y="511.5" >Ben..</text>
</g>
<g >
<title>std::mutex::unlock (14,714,793 samples, 7.93%)</title><rect x="793.7" y="421" width="93.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="796.68" y="431.5" >std::mutex:..</text>
</g>
<g >
<title>futex_wait (23,050,245 samples, 12.42%)</title><rect x="616.5" y="309" width="146.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="619.45" y="319.5" >futex_wait</text>
</g>
<g >
<title>sched_clock_cpu (728,345 samples, 0.39%)</title><rect x="714.0" y="229" width="4.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="716.97" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (69,705 samples, 0.04%)</title><rect x="10.0" y="581" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>__count_memcg_events (2,618,111 samples, 1.41%)</title><rect x="225.2" y="261" width="16.6" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="228.18" y="271.5" ></text>
</g>
<g >
<title>futex_wait_setup (6,058,042 samples, 3.26%)</title><rect x="724.5" y="277" width="38.5" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="727.46" y="287.5" >fut..</text>
</g>
<g >
<title>CentralCache::FetchRangeObj (72,192,060 samples, 38.89%)</title><rect x="28.0" y="437" width="458.8" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="30.97" y="447.5" >CentralCache::FetchRangeObj</text>
</g>
<g >
<title>sync_regs (175,739 samples, 0.09%)</title><rect x="1082.5" y="581" width="1.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1085.49" y="591.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,165,799 samples, 0.63%)</title><rect x="971.6" y="565" width="7.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="974.63" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::end (2,679,948 samples, 1.44%)</title><rect x="491.3" y="437" width="17.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="494.35" y="447.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (4,870,310 samples, 2.62%)</title><rect x="1108.2" y="325" width="31.0" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1111.21" y="335.5" >fr..</text>
</g>
<g >
<title>std::vector&lt;void*, std::allocator&lt;void*&gt; &gt;::_S_max_size (337,067 samples, 0.18%)</title><rect x="938.6" y="469" width="2.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="941.55" y="479.5" ></text>
</g>
<g >
<title>error_entry (2,528,622 samples, 1.36%)</title><rect x="1039.6" y="581" width="16.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1042.63" y="591.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (54,477,619 samples, 29.34%)</title><rect x="126.4" y="405" width="346.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="129.43" y="415.5" >asm_exc_page_fault</text>
</g>
<g >
<title>mas_find (1,165,799 samples, 0.63%)</title><rect x="971.6" y="357" width="7.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="974.63" y="367.5" ></text>
</g>
<g >
<title>psi_task_switch (2,222,024 samples, 1.20%)</title><rect x="699.8" y="229" width="14.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="702.84" y="239.5" ></text>
</g>
<g >
<title>unlink_chunk.constprop.0 (2,648,157 samples, 1.43%)</title><rect x="1173.2" y="597" width="16.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1176.17" y="607.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2,040,295 samples, 1.10%)</title><rect x="355.2" y="197" width="13.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="358.19" y="207.5" ></text>
</g>
<g >
<title>update_process_times (972,216 samples, 0.52%)</title><rect x="1120.7" y="117" width="6.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1123.67" y="127.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,999,417 samples, 1.08%)</title><rect x="84.8" y="373" width="12.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="87.78" y="383.5" ></text>
</g>
<g >
<title>std::map&lt;unsigned long long, Span*, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::operator[] (1,244,002 samples, 0.67%)</title><rect x="61.3" y="373" width="7.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="64.34" y="383.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (3,848,410 samples, 2.07%)</title><rect x="368.2" y="197" width="24.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="371.16" y="207.5" >_..</text>
</g>
<g >
<title>do_user_addr_fault (45,655,093 samples, 24.59%)</title><rect x="182.5" y="373" width="290.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="185.51" y="383.5" >do_user_addr_fault</text>
</g>
<g >
<title>std::__invoke_result&lt;BenchmarkConcurrentMalloc (139,430,600 samples, 75.11%)</title><rect x="12.1" y="533" width="886.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="15.10" y="543.5" >std::__invoke_result&lt;BenchmarkConcurrentMalloc</text>
</g>
<g >
<title>zap_pmd_range.isra.0 (6,721,132 samples, 3.62%)</title><rect x="1096.4" y="389" width="42.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1099.44" y="399.5" >zap_..</text>
</g>
<g >
<title>lru_gen_add_folio (2,479,528 samples, 1.34%)</title><rect x="392.6" y="229" width="15.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="395.62" y="239.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1,999,417 samples, 1.08%)</title><rect x="84.8" y="309" width="12.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="87.78" y="319.5" ></text>
</g>
<g >
<title>x64_sys_call (10,066,081 samples, 5.42%)</title><rect x="798.1" y="357" width="64.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="801.14" y="367.5" >x64_sys..</text>
</g>
<g >
<title>__hrtimer_run_queues (972,216 samples, 0.52%)</title><rect x="1120.7" y="165" width="6.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1123.67" y="175.5" ></text>
</g>
<g >
<title>may_expand_vm (2,066,101 samples, 1.11%)</title><rect x="1026.5" y="485" width="13.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1029.50" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (8,740,193 samples, 4.71%)</title><rect x="1083.6" y="549" width="55.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1086.61" y="559.5" >__x64..</text>
</g>
<g >
<title>BenchmarkConcurrentMalloc (139,430,600 samples, 75.11%)</title><rect x="12.1" y="501" width="886.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="15.10" y="511.5" >BenchmarkConcurrentMalloc</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_erase (954,344 samples, 0.51%)</title><rect x="1055.7" y="469" width="6.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1058.71" y="479.5" ></text>
</g>
<g >
<title>vm_area_alloc (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="453" width="9.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1019.59" y="463.5" ></text>
</g>
<g >
<title>lru_gen_del_folio.constprop.0 (1,937,594 samples, 1.04%)</title><rect x="1126.8" y="293" width="12.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1129.85" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_erase (954,344 samples, 0.51%)</title><rect x="1055.7" y="405" width="6.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1058.71" y="415.5" ></text>
</g>
<g >
<title>mmap_region (1,999,417 samples, 1.08%)</title><rect x="84.8" y="261" width="12.7" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="87.78" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_erase (954,344 samples, 0.51%)</title><rect x="1055.7" y="501" width="6.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1058.71" y="511.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;void*&gt; &gt;::construct&lt;void*, void*&gt; (3,052,843 samples, 1.64%)</title><rect x="917.0" y="453" width="19.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="920.02" y="463.5" ></text>
</g>
<g >
<title>__schedule (11,185,841 samples, 6.03%)</title><rect x="653.4" y="245" width="71.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="656.36" y="255.5" >__schedule</text>
</g>
<g >
<title>std::map&lt;unsigned long long, Span*, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::lower_bound (1,244,002 samples, 0.67%)</title><rect x="61.3" y="357" width="7.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="64.34" y="367.5" ></text>
</g>
<g >
<title>ret_from_fork (141,102 samples, 0.08%)</title><rect x="1081.6" y="565" width="0.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1084.60" y="575.5" ></text>
</g>
<g >
<title>wake_affine (1,514,499 samples, 0.82%)</title><rect x="834.6" y="245" width="9.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="837.59" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::lower_bound (1,244,002 samples, 0.67%)</title><rect x="61.3" y="341" width="7.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="64.34" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;::_M_ptr (756,235 samples, 0.41%)</title><rect x="536.8" y="373" width="4.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="539.81" y="383.5" ></text>
</g>
<g >
<title>alloc_pages (578,487 samples, 0.31%)</title><rect x="1077.9" y="437" width="3.7" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1080.92" y="447.5" ></text>
</g>
<g >
<title>futex_wait_queue (14,223,976 samples, 7.66%)</title><rect x="634.0" y="277" width="90.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="637.05" y="287.5" >futex_wait..</text>
</g>
<g >
<title>do_syscall_64 (2,066,101 samples, 1.11%)</title><rect x="1026.5" y="565" width="13.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1029.50" y="575.5" ></text>
</g>
<g >
<title>rseq_ip_fixup (1,042,264 samples, 0.56%)</title><rect x="587.1" y="325" width="6.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="590.06" y="335.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2,019,061 samples, 1.09%)</title><rect x="1083.6" y="437" width="12.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1086.61" y="447.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (738,826 samples, 0.40%)</title><rect x="758.3" y="229" width="4.7" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="761.27" y="239.5" ></text>
</g>
<g >
<title>__update_load_avg_se (864,138 samples, 0.47%)</title><rect x="664.4" y="181" width="5.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="667.36" y="191.5" ></text>
</g>
<g >
<title>native_send_call_func_single_ipi (1,933,686 samples, 1.04%)</title><rect x="849.8" y="229" width="12.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="852.84" y="239.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (732,345 samples, 0.39%)</title><rect x="572.7" y="421" width="4.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="575.74" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,319,150 samples, 1.25%)</title><rect x="950.1" y="565" width="14.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="953.14" y="575.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (49,561 samples, 0.03%)</title><rect x="536.5" y="357" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="539.50" y="367.5" ></text>
</g>
<g >
<title>iterate_tty_write (2,319,150 samples, 1.25%)</title><rect x="950.1" y="437" width="14.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="953.14" y="447.5" ></text>
</g>
<g >
<title>switch_fpu_return (93,351 samples, 0.05%)</title><rect x="998.6" y="533" width="0.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1001.63" y="543.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (702,382 samples, 0.38%)</title><rect x="793.7" y="357" width="4.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="796.68" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_S_left (670,038 samples, 0.36%)</title><rect x="552.0" y="389" width="4.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="555.02" y="399.5" ></text>
</g>
<g >
<title>begin_new_exec (69,705 samples, 0.04%)</title><rect x="10.0" y="421" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (6,713,075 samples, 3.62%)</title><rect x="214.0" y="293" width="42.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="216.98" y="303.5" >__me..</text>
</g>
<g >
<title>do_mmap (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="485" width="9.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1019.59" y="495.5" ></text>
</g>
<g >
<title>__mod_zone_page_state (959,950 samples, 0.52%)</title><rect x="1114.6" y="229" width="6.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1117.57" y="239.5" ></text>
</g>
<g >
<title>__alloc_pages (21,391,370 samples, 11.52%)</title><rect x="256.7" y="245" width="135.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="259.65" y="255.5" >__alloc_pages</text>
</g>
<g >
<title>do_group_exit (8,740,193 samples, 4.71%)</title><rect x="1083.6" y="533" width="55.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1086.61" y="543.5" >do_gr..</text>
</g>
<g >
<title>__mmap (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="597" width="9.9" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1019.59" y="607.5" ></text>
</g>
<g >
<title>futex_q_lock (738,826 samples, 0.40%)</title><rect x="758.3" y="261" width="4.7" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="761.27" y="271.5" ></text>
</g>
<g >
<title>ThreadCache::ListTooLong (799,089 samples, 0.43%)</title><rect x="887.2" y="453" width="5.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="890.21" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8,740,193 samples, 4.71%)</title><rect x="1083.6" y="597" width="55.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1086.61" y="607.5" >entry..</text>
</g>
<g >
<title>ksys_write (2,319,150 samples, 1.25%)</title><rect x="950.1" y="501" width="14.8" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="953.14" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;void**, std::vector&lt;void*, std::allocator&lt;void*&gt; &gt; &gt;::operator- (2,938,007 samples, 1.58%)</title><rect x="898.3" y="437" width="18.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="901.35" y="447.5" ></text>
</g>
<g >
<title>exit_mmap (8,740,193 samples, 4.71%)</title><rect x="1083.6" y="453" width="55.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1086.61" y="463.5" >exit_..</text>
</g>
<g >
<title>x64_sys_call (1,165,799 samples, 0.63%)</title><rect x="971.6" y="549" width="7.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="974.63" y="559.5" ></text>
</g>
<g >
<title>PageCache::NewSpan (1,244,002 samples, 0.67%)</title><rect x="61.3" y="389" width="7.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="64.34" y="399.5" ></text>
</g>
<g >
<title>ObjectPool&lt;Span&gt;::New (2,727,163 samples, 1.47%)</title><rect x="999.3" y="517" width="17.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1002.26" y="527.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="437" width="9.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1019.59" y="447.5" ></text>
</g>
<g >
<title>call_function_single_prep_ipi (884,169 samples, 0.48%)</title><rect x="844.2" y="229" width="5.6" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="847.22" y="239.5" ></text>
</g>
<g >
<title>exit_mm (8,740,193 samples, 4.71%)</title><rect x="1083.6" y="501" width="55.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1086.61" y="511.5" >exit_mm</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::_M_erase (954,344 samples, 0.51%)</title><rect x="1055.7" y="453" width="6.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1058.71" y="463.5" ></text>
</g>
<g >
<title>std::map&lt;unsigned long long, Span*, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::operator[] (4,552,914 samples, 2.45%)</title><rect x="97.5" y="389" width="28.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="100.49" y="399.5" >st..</text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unique_lock (36,596,800 samples, 19.71%)</title><rect x="561.1" y="453" width="232.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="564.06" y="463.5" >std::unique_lock&lt;std::mutex&gt;::..</text>
</g>
<g >
<title>__get_user_8 (1,042,264 samples, 0.56%)</title><rect x="587.1" y="309" width="6.6" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="590.06" y="319.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1,558,494 samples, 0.84%)</title><rect x="1016.6" y="517" width="9.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1019.59" y="527.5" ></text>
</g>
<g >
<title>std::mutex::lock (799,089 samples, 0.43%)</title><rect x="887.2" y="421" width="5.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="890.21" y="431.5" ></text>
</g>
<g >
<title>__handle_mm_fault (36,540,277 samples, 19.68%)</title><rect x="194.5" y="341" width="232.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="197.52" y="351.5" >__handle_mm_fault</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, Span*&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, Span*&gt; &gt; &gt;::~_Rb_tree (954,344 samples, 0.51%)</title><rect x="1055.7" y="549" width="6.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1058.71" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (1,999,417 samples, 1.08%)</title><rect x="84.8" y="325" width="12.7" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="87.78" y="335.5" ></text>
</g>
<g >
<title>handle_pte_fault (578,487 samples, 0.31%)</title><rect x="1077.9" y="501" width="3.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1080.92" y="511.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wait (33,328,880 samples, 17.95%)</title><rect x="577.4" y="405" width="211.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="580.39" y="415.5" >__GI___lll_lock_wait</text>
</g>
<g >
<title>__mod_memcg_lruvec_state (945,737 samples, 0.51%)</title><rect x="1133.2" y="277" width="6.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1136.15" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;void*&gt; &gt;::allocate (334,433 samples, 0.18%)</title><rect x="936.4" y="453" width="2.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="939.43" y="463.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (578,487 samples, 0.31%)</title><rect x="1077.9" y="421" width="3.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1080.92" y="431.5" ></text>
</g>
<g >
<title>__run_exit_handlers (954,344 samples, 0.51%)</title><rect x="1055.7" y="597" width="6.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1058.71" y="607.5" ></text>
</g>
<g >
<title>__static_initialization_and_destruction_0 (2,727,163 samples, 1.47%)</title><rect x="999.3" y="565" width="17.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1002.26" y="575.5" ></text>
</g>
<g >
<title>_raw_spin_lock (738,826 samples, 0.40%)</title><rect x="758.3" y="245" width="4.7" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="761.27" y="255.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (2,626,868 samples, 1.41%)</title><rect x="1156.5" y="437" width="16.7" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1159.47" y="447.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;BenchmarkConcurrentMalloc (139,430,600 samples, 75.11%)</title><rect x="12.1" y="549" width="886.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="15.10" y="559.5" >void std::thread::_Invoker&lt;std::tuple&lt;BenchmarkConcurrentMalloc</text>
</g>
<g >
<title>folio_batch_move_lru (2,479,528 samples, 1.34%)</title><rect x="392.6" y="261" width="15.8" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="395.62" y="271.5" ></text>
</g>
<g >
<title>dequeue_entity (1,587,246 samples, 0.85%)</title><rect x="659.8" y="197" width="10.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="662.77" y="207.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (2,040,295 samples, 1.10%)</title><rect x="355.2" y="37" width="13.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="358.19" y="47.5" ></text>
</g>
<g >
<title>futex_hash (1,490,615 samples, 0.80%)</title><rect x="798.1" y="309" width="9.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="801.14" y="319.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (972,216 samples, 0.52%)</title><rect x="1120.7" y="229" width="6.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1123.67" y="239.5" ></text>
</g>
<g >
<title>handle_mm_fault (2,626,868 samples, 1.41%)</title><rect x="1156.5" y="533" width="16.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1159.47" y="543.5" ></text>
</g>
<g >
<title>handle_pte_fault (2,626,868 samples, 1.41%)</title><rect x="1156.5" y="501" width="16.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1159.47" y="511.5" ></text>
</g>
</g>
</svg>
